name: CI - Build, Validate and Push Multi-Service (Staging Only)

on:
  push:
    branches: [ staging ]
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [staging]

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}

jobs:
  #  1: Prolog Service 
  build-prolog:
    runs-on: ubuntu-latest
    outputs:
      validation-status: ${{ steps.validate.outcome }}
      image-tag: ${{ steps.meta-prolog.outputs.tags }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
     
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
     
    - name: Login to Docker Hub
      if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Create .env file
      run: |
        echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
        echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> .env
        echo "HF_TOKEN=${{ secrets.HF_TOKEN }}" >> .env
        echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env

    - name: Extract Docker metadata
      id: meta-prolog
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_HUB_USERNAME }}/hypothesis-generation-prolog
        tags: |
          type=ref,event=branch
          type=raw,value=staging,enable=${{ github.ref == 'refs/heads/staging' }}

    - name: Free Disk Space
      run: |
        sudo docker system prune -a -f
        sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
        df -h

    - name: Build and Validate Prolog Service
      id: validate
  
      run: |
        echo "=== Building Prolog Service ==="
        docker build -t ${{ steps.meta-prolog.outputs.tags }} -f Dockerfile.prolog .
        
        echo "=== Starting container for validation ==="
        docker run -d --name prolog-test --env-file .env ${{ steps.meta-prolog.outputs.tags }}
        
        echo "=== Waiting for container initialization (30s) ==="
        sleep 30
        
        echo "=== Checking container status ==="
        if ! docker ps --filter "name=prolog-test" --format "{{.Names}}" | grep -q prolog-test; then
          echo "VALIDATION FAILED: Container is not running!"
          echo "=== Container Logs ==="
          docker logs prolog-test
          docker rm -f prolog-test 2>/dev/null || true
          exit 1
        fi
        
        echo "=== Capturing container logs ==="
        docker logs prolog-test > /tmp/prolog-logs.txt 2>&1
        
        echo "=== Analyzing logs for errors ==="
        if grep -iE "error|exception|failed|fatal|traceback|modulenotfounderror|importerror|cannot find|does not exist|no such file" /tmp/prolog-logs.txt; then
          echo "VALIDATION FAILED: Errors detected in container logs!"
          echo "=== Full Container Logs ==="
          cat /tmp/prolog-logs.txt
          docker stop prolog-test
          docker rm prolog-test
          exit 1
        fi
        
        echo "VALIDATION PASSED: Container is healthy!"
        echo "=== Container Logs (for reference) ==="
        cat /tmp/prolog-logs.txt
        
        echo "=== Cleaning up test container ==="
        docker stop prolog-test
        docker rm prolog-test

    - name: Push Prolog Service to Docker Hub
      if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && steps.validate-container.outcome == 'success'
      run: |
        echo "=== Pushing validated image to Docker Hub ==="
        docker push ${{ steps.meta-prolog.outputs.tags }}

    - name: Final cleanup
      if: always()
      run: |
        docker rm -f prolog-test 2>/dev/null || true
        docker system prune -a -f

  # 2: Prefect Service  
  build-prefect:
    runs-on: ubuntu-latest
    
    needs: build-prolog  # Run after prolog build completes
    outputs:
      validation-status: ${{ steps.validate.outcome }}
      image-tag: ${{ steps.meta-prefect.outputs.tags }}
    steps:
    - name: Check Prolog status
      run: |
        echo "Prolog job status: ${{ needs.build-prolog.result }}"
        echo "Prolog validation: ${{ needs.build-prolog.outputs.validation-status }}"
     
    - name: Checkout repository
      uses: actions/checkout@v4
     
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
     
    - name: Login to Docker Hub
      # Only login on push (not on PR)
      if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && steps.validate-container.outcome == 'success'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Create .env file
      run: |
        echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
        echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> .env
        echo "HF_TOKEN=${{ secrets.HF_TOKEN }}" >> .env
        echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env

    - name: Extract Docker metadata
      id: meta-prefect
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_HUB_USERNAME }}/hypothesis-generation-prefect
        tags: |
          type=ref,event=branch
          type=raw,value=staging,enable=${{ github.ref == 'refs/heads/staging' }}

    - name: Free Disk Space
      run: |
        sudo docker system prune -a -f
        sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
        df -h

    - name: Build and Validate Prefect Service
      id: validate
      run: |
        echo "=== Building Prefect Service ==="
        docker build -t ${{ steps.meta-prefect.outputs.tags }} -f Dockerfile.prefect .
        
        echo "=== Starting container for validation ==="
        docker run -d --name prefect-test --env-file .env ${{ steps.meta-prefect.outputs.tags }}
        
        echo "=== Waiting for container initialization (30s) ==="
        sleep 30
        
        echo "=== Checking container status ==="
        if ! docker ps --filter "name=prefect-test" --format "{{.Names}}" | grep -q prefect-test; then
          echo "VALIDATION FAILED: Container is not running!"
          docker logs prefect-test
          docker rm -f prefect-test 2>/dev/null || true
          exit 1
        fi
        
        echo "=== Analyzing logs for errors ==="
        docker logs prefect-test > /tmp/prefect-logs.txt 2>&1
        if grep -iE "error|exception|failed|fatal|traceback|modulenotfounderror|importerror|cannot find|does not exist|no such file" /tmp/prefect-logs.txt; then
          echo "VALIDATION FAILED: Errors detected in container logs!"
          cat /tmp/prefect-logs.txt
          docker stop prefect-test
          docker rm prefect-test
          exit 1
        fi
        
        echo "VALIDATION PASSED: Container is healthy!"
        cat /tmp/prefect-logs.txt
        docker stop prefect-test
        docker rm prefect-test

    - name: Push Prefect Service to Docker Hub
      if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && steps.validate-container.outcome == 'success'
      run: |
        echo "=== Pushing validated image to Docker Hub ==="
        docker push ${{ steps.meta-prefect.outputs.tags }}

    - name: Final cleanup
      if: always()
      run: |
        docker rm -f prefect-test 2>/dev/null || true
        docker system prune -a -f

  # 3: Prefect Deployment Service 
  build-prefect-deployment:
    runs-on: ubuntu-lates
    needs: build-prefect
    outputs:
      validation-status: ${{ steps.validate.outcome }}
      image-tag: ${{ steps.meta-prefect-deployment.outputs.tags }}
    steps:
    - name: Check Previous Services Status
      run: |
        echo "Prolog status: ${{ needs.build-prolog.result }}"
        echo "Prefect status: ${{ needs.build-prefect.result }}"
     
    - name: Checkout repository
      uses: actions/checkout@v4
     
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
     
    - name: Login to Docker Hub
      # Only login on push (not on PR)
      if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && steps.validate-container.outcome == 'success'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Create .env file
      run: |
        echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
        echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> .env
        echo "HF_TOKEN=${{ secrets.HF_TOKEN }}" >> .env
        echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env

    - name: Extract Docker metadata
      id: meta-prefect-deployment
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_HUB_USERNAME }}/hypothesis-generation-prefect-deployment
        tags: |
          type=ref,event=branch
          type=raw,value=staging,enable=${{ github.ref == 'refs/heads/staging' }}

    - name: Free Disk Space
      run: |
        sudo docker system prune -a -f
        sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
        df -h

    - name: Build and Validate Prefect Deployment Service
      id: validate
      run: |
        echo "=== Building Prefect Deployment Service ==="
        docker build -t ${{ steps.meta-prefect-deployment.outputs.tags }} -f Dockerfile.prefect .
        
        echo "=== Starting container for validation ==="
        docker run -d --name prefect-deployment-test --env-file .env ${{ steps.meta-prefect-deployment.outputs.tags }}
        
        echo "=== Waiting for container initialization (30s) ==="
        sleep 30
        
        echo "=== Checking container status ==="
        if ! docker ps --filter "name=prefect-deployment-test" --format "{{.Names}}" | grep -q prefect-deployment-test; then
          echo "VALIDATION FAILED: Container is not running!"
          docker logs prefect-deployment-test
          docker rm -f prefect-deployment-test 2>/dev/null || true
          exit 1
        fi
        
        echo "=== Analyzing logs for errors ==="
        docker logs prefect-deployment-test > /tmp/prefect-deployment-logs.txt 2>&1
        if grep -iE "error|exception|failed|fatal|traceback|modulenotfounderror|importerror|cannot find|does not exist|no such file" /tmp/prefect-deployment-logs.txt; then
          echo "VALIDATION FAILED: Errors detected in container logs!"
          cat /tmp/prefect-deployment-logs.txt
          docker stop prefect-deployment-test
          docker rm prefect-deployment-test
          exit 1
        fi
        
        echo "VALIDATION PASSED: Container is healthy!"
        cat /tmp/prefect-deployment-logs.txt
        docker stop prefect-deployment-test
        docker rm prefect-deployment-test

    - name: Push Prefect Deployment Service to Docker Hub
      if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && steps.validate-container.outcome == 'success'
      run: |
        echo "=== Pushing validated image to Docker Hub ==="
        docker push ${{ steps.meta-prefect-deployment.outputs.tags }}

    - name: Final cleanup
      if: always()
      run: |
        docker rm -f prefect-deployment-test 2>/dev/null || true
        docker system prune -a -f

  # 4: Flask App  
  build-flask:
    runs-on: ubuntu-lates
    needs: build-prefect-deployment
    outputs:
      validation-status: ${{ steps.validate.outcome }}
      image-tag: ${{ steps.meta-flask.outputs.tags }}
    steps:
    - name: Check All Previous Services Status
      run: |
        echo "Prolog status: ${{ needs.build-prolog.result }}"
        echo "Prefect status: ${{ needs.build-prefect.result }}"
        echo "Prefect Deployment status: ${{ needs.build-prefect-deployment.result }}"
     
    - name: Checkout repository
      uses: actions/checkout@v4
     
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
     
    - name: Login to Docker Hub
      # Only login on push (not on PR)
      if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && steps.validate-container.outcome == 'success'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Create .env file
      run: |
        echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
        echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> .env
        echo "HF_TOKEN=${{ secrets.HF_TOKEN }}" >> .env
        echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env

    - name: Extract Docker metadata
      id: meta-flask
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_HUB_USERNAME }}/hypothesis-generation-flask
        tags: |
          type=ref,event=branch
          type=raw,value=staging,enable=${{ github.ref == 'refs/heads/staging' }}

    - name: Free Disk Space
      run: |
        sudo docker system prune -a -f
        sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
        df -h

    - name: Build and Validate Flask App
      id: validate
      run: |
        echo "=== Building Flask App ==="
        docker build -t ${{ steps.meta-flask.outputs.tags }} -f Dockerfile .
        
        echo "=== Starting container for validation ==="
        docker run -d --name flask-test --env-file .env ${{ steps.meta-flask.outputs.tags }}
        
        echo "=== Waiting for container initialization (30s) ==="
        sleep 30
        
        echo "=== Checking container status ==="
        if ! docker ps --filter "name=flask-test" --format "{{.Names}}" | grep -q flask-test; then
          echo "VALIDATION FAILED: Container is not running!"
          docker logs flask-test
          docker rm -f flask-test 2>/dev/null || true
          exit 1
        fi
        
        echo "=== Analyzing logs for errors ==="
        docker logs flask-test > /tmp/flask-logs.txt 2>&1
        if grep -iE "error|exception|failed|fatal|traceback|modulenotfounderror|importerror|cannot find|does not exist|no such file" /tmp/flask-logs.txt; then
          echo "VALIDATION FAILED: Errors detected in container logs!"
          cat /tmp/flask-logs.txt
          docker stop flask-test
          docker rm flask-test
          exit 1
        fi
        
        echo "VALIDATION PASSED: Container is healthy!"
        cat /tmp/flask-logs.txt
        docker stop flask-test
        docker rm flask-test

    - name: Push Flask App to Docker Hub
      if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && steps.validate-container.outcome == 'success'
      run: |
        echo "=== Pushing validated image to Docker Hub ==="
        docker push ${{ steps.meta-flask.outputs.tags }}

    - name: Set deployment trigger
      
      if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && steps.validate-container.outcome == 'success'
      id: deployment-trigger
      run: |
        echo "docker_pushed=true" >> $GITHUB_OUTPUT

    - name: Final cleanup
      if: always()
      run: |
        docker rm -f flask-test 2>/dev/null || true
        docker system prune -a -f

    - name: Trigger CD workflow via Repository Dispatch
       
      if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && steps.validate-container.outcome == 'success'
      run: |
        curl -L -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/dispatches \
          -d '{"event_type":"deploy-staging","client_payload":{"image_tag":"${{ steps.set-image-tag.outputs.image-tag }}"}}'
        echo "[SUCCESS] CD workflow triggered successfully!"

  # Final validation check  
  validation-summary:
    runs-on: ubuntu-latest
    needs: [build-prolog, build-prefect, build-prefect-deployment, build-flask]
    if: always()
    steps:
    - name: Check all validations
      run: |
        echo "=== Validation Summary ==="
        echo "Prolog: ${{ needs.build-prolog.outputs.validation-status }}"
        echo "Prefect: ${{ needs.build-prefect.outputs.validation-status }}"
        echo "Prefect Deployment: ${{ needs.build-prefect-deployment.outputs.validation-status }}"
        echo "Flask: ${{ needs.build-flask.outputs.validation-status }}"
        
        FAILED_SERVICES=0
        if [[ "${{ needs.build-prolog.outputs.validation-status }}" == "failure" ]]; then ((FAILED_SERVICES++)); fi
        if [[ "${{ needs.build-prefect.outputs.validation-status }}" == "failure" ]]; then ((FAILED_SERVICES++)); fi
        if [[ "${{ needs.build-prefect-deployment.outputs.validation-status }}" == "failure" ]]; then ((FAILED_SERVICES++)); fi
        if [[ "${{ needs.build-flask.outputs.validation-status }}" == "failure" ]]; then ((FAILED_SERVICES++)); fi
        
        if [[ $FAILED_SERVICES -gt 0 ]]; then
          echo " $FAILED_SERVICES service(s) failed validation!"
          echo "But the pipeline continued to build all services."
          exit 1  # Fail the final summary if any service failed
        else
          echo " All services passed validation!"
        fi